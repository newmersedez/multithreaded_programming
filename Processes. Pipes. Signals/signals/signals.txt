//////////////////////////// Signals ANSI ////////////////////////////

1) Errors
	SIGFPE - div by 0
	SIGPIPE - incorrect socket/pype
	SIGSEGV - segmentation fault
	SIGXCPU - processor time

2) Signals, generated by user/app
	SIGABRT - call abort() or if not enough memory
	SIGHUB - disconnect
	SIGKILL(9) - kill process ("hard")
	SIGTERN - terminate process ("soft")
	SIGINT - Ctrl + c
	SIGUSR1 and SIGUSR2 - user signals

3) Task management
	SIGCHILD - process child died (to avoid zombie-processes)

4) Timer events
	alarm(...) ---> SIGALARM
					SIGVTALARM
					SIGFROT

/////////////////////////// Main functions ///////////////////////////

1) void (*signal(int signum, void (*func)(int)))(int)
	signum - signal code
	func - handler:
			SIG_DFL
			SIG_IGN
			own handler funcion
	Function returns old handler


/////////////////////////// Posix signals ///////////////////////////

struct sigset_t

struct sigaction {
	void     (*sa_handler)(int);
	void     (*sa_sigaction)(int, siginfo_t *, void *);
	sigset_t   sa_mask;
	int        sa_flags;
	void     (*sa_restorer)(void);
};

0) int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
	like signal();

1) int sigemptyset(sigset_t *set)
	fills set with 0

2) int sigfillset(sigset_t *set)
	fills set with 1

3) int sigaddset(sigset_t *set, int signum)
	add signal to set

4) int sigdelset(sigset_t *set, int signum)
	dell signal from set

5) int sigismember(const sigset_t *set, int signum)
	check if signal is member of set

6) int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)
	set signal mask in sigset_t set
	how - SIG_BLOCK (union), SIG_UNBLOCK(not union), SIG_SETMASK
	set - new set of signals
	oldset - old set of signals

7) kill (pid_t pid, int signum)
	send signal after kill process

8) raise(int signum)
	send signal