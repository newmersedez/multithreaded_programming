by newmersedez

Multiplexing is a method by which multiple analog or digital signals are
combined into one signal over a shared medium.

				Multiplexing methods

1) select

	>>> struct fd_set - set of sockets(block of memory with size = BUFFER_SIZE
		=> max socket fd = 1023)
		disadvantage of this method: C10K and C100K errors

	>>> FD_ZERO(&set) - macros which fills struct fields with default values(0)

	>>> FD_SET(masterSocket, &set) - macros which set master socket
		In this cycle we add all slave sockets into out set
		for (every slave)
		{
			FD_SET(slave, &set) - 
		}
	Then find maximum slave fd so that server knows the boundary
		int MAX = (...)

	>>> select(MAX + 1, &set, NULL, NULL, NULL);
		1 param - Max size fd + 1
		2 param - fd which server listening for reading
		3 param - fd which server listening for writing
		4 param - error
		5 param - timeout

		Then:
		for (every slave)
		{
			if (FD_ISSET(slave, &set))
			{
				//code: slave - read
			}
		}
		if (FD_ISSET(masterSocket, &set))
		{
			//code: master - accept(...);
		}

2) poll

	struct poll set[POL_SIZE];
	set[0].fd = master_socket;
	set[0].events = POLLIN;

	1 + all slaves

	poll(set, setsiz, -1);
	for (...)
	{
		if (set[i].revents & POLLIN)
		{
			//code: master - accept, slave - read;
		}
	}

3) EPoll

	int EPoll = epoll_create1(0);
	struct epoll_event	Event;

	Event.data.fd = masterSocket;
	Event.events = EPOLIN1;
	epoll_ctl(EPoll, EPOLL_CTL_ADD, masterSocket, &Event);
	while (true)
	{
		int N = epoll_wait(EPoll, Events, A, -1);
		for (... N)
		{
			if (Events[i].events & EPOLLERR || Events[i].events & EPOLLHUP)
			{
				//code: close connection
			}
			else if (Events[i].events & EPOLLIN || Events[i].events & EPOLLHUP)
			{
				//code: read
			}
			else if (Events[i].events & EPOLLOUT || Events[i].events & EPOLLHUP)
			{
				//code: write
			}
		}
	}

4) KQueue

	int KQueue = kqueue();
	struct kevent Kevent;
	bzero(&Event, masterSocket, EVFILL_READ, EV_ADD, 0, 0, 0);
	kevent(KQueue, &Kevent, 1);
	while (true)
	{
		bzero(&Event, sizeof(Kevent));
		kevent(KQueue, NULL, 0, &Kevent, 1, NULL);
		if (KEvent.filter == EVFILT_READ)
			//code: read
	}
